---
title: "Examine eyetracking data for an individual participant"
format: html
editor: visual
---

Overall the exampleAnalysesWithGoodFixator report from that file showed that for at least 7 trials out of 120, the eyetracker is way off, with X off by 90 pixels. Otherwise, things were reasonable esp. after first 500 ms when fixation period starts. But by reasonable, I mean that drift or something means that X and Y was off by up to \~20 pixels. For the weird 7 trials, there weren't many fixations so I should check how much missing data ("blinks") there was, maybe that helps explain why those trials were weird.

To-do: Add a form of drift correction, like maybe the average starting eye position in every 20 trials.

## Do basic checks

```{r}
#| echo: false
library(eyelinkReader)
library(dplyr)
library(ggplot2)
widthPix = 800; heightPix = 600
```

Read in an EDF file,

```{r}
#| echo: false

directoryWithDataFile<-"dataForTestingOfCode"
fname<-"S451.EDF"
EDFfileWithPath<-file.path(directoryWithDataFile,fname)
if (!file.exists(EDFfileWithPath)) {
  message( paste0("File'",EDFfileWithPath,"'not found!") )
  stop('Could not find the file')
}
```

EDF file name: `r fname` in directory `r directoryWithDataFile`

```{r}
#| echo: false

EDFstuff <- eyelinkReader::read_edf(EDFfileWithPath,
                                    import_samples = TRUE,
                                    sample_attributes = c('time', 'gx', 'gy'))
```

Check which eye was tracked, and create new x and y columns based on which eye it was.
```{r whichEye}
#| echo: false

samples<- EDFstuff$samples
numNotNArightEye <- sum( !is.na(samples$gxR) )
numNotNAleftEye <- sum( !is.na(samples$gxL) )
if (numNotNArightEye>0 & numNotNAleftEye==0) {
  message("The right eye was tracked exclusively.")
  samples$x <- samples$gxR
  samples$y <- samples$gyR
}
if (numNotNAleftEye>0 & numNotNArightEye==0) {
  message("The left eye was tracked exclusively.")
  samples$x <- samples$gxL
  samples$y <- samples$gyL
}
if (numNotNAleftEye>0 & numNotNArightEye>0) {
  message("Sometimes the left eye was tracked and on others the right, and I'm not set up to handle that. You should check each trial.")
}

```
## Graphs

Assuming screen width is `r widthPix` pixels and screen height is `r heightPix` pixels,

check mean x in and mean y in samples (raw eyetracker record of where person was looking) to see where it is relative to screen center.

```{r}
#| echo: false

screenCtr <-  data.frame( x=widthPix/2, y= heightPix/2)
criterionDist<-40
avgSampleRelCtr<- samples %>%
                summarise(x = mean(x,na.rm=TRUE), y = mean(y,na.rm=TRUE)) - screenCtr

# Function to check for any TRUE values but return FALSE if all are NaN, as will occur if no values because the other eye was tracked or there is no data.
any_true_except_all_nan <- function(x) {
  if (all(is.nan(x))) {
    return(FALSE)
  } else {
    return(any(x, na.rm = TRUE))
  }
}
deviationLarge<- any_true_except_all_nan( abs(avgSampleRelCtr) > 40 )

if ( deviationLarge ) { #check if deviation from screen center of average fixation location is greater than 40
  msg = paste0("Average eye location should be near screen center (",widthPix/2,",",heightPix/2,") but")
  msg=paste0(msg,"for this participant, it's more than")
  msg=paste(msg,criterionDist,"pixels from the center, on average the eye position relative to center was (x,y)")
  msg=paste0(msg,'(',round(avgSampleRelCtr$x,1),',',round(avgSampleRelCtr$y,1),')')
  msg=paste(msg,"This happens because the eyetracker or its calibration was no good, or the participant didn't look near center much.")
  message(msg)
} else {
  msg="Average eye position was pretty close to screen center, deviated on average: (x,y) "
  msg=paste0(msg,'(',round(avgSampleRelCtr$x,1),',',round(avgSampleRelCtr$y,1),')')
  message(msg)
}

```

Plot average eye position in each quartile of trials

```{r}
#| echo: false

screenResolutions <- data.frame( widthPix = c(800,1024,1512,1600,1600)-widthPix/2, 
                                  heightPix=c(600,768,982,900,1200)-heightPix/2,
                    resolution=c("800x600","1024x768","1512x982","1600x900","1600x1200"))
commonScrnResolutns<- screenResolutions[1:2,]

samples<-samples |> mutate(xDev = x - widthPix/2, yDev = y - heightPix/2)

# Calculate quartiles
quartiles <- quantile(samples$trial)
# Create the new column 'quartile'
samples <- samples %>%
  mutate(quartile = cut(trial, breaks = quartiles, include.lowest = TRUE, labels = FALSE))

avg<- samples |> group_by(quartile) |> 
  summarise(meanX = mean(xDev,na.rm=T), meanY = mean(yDev,na.rm=T))

avgPlot<- ggplot(avg, aes(x= meanX, y= meanY, label=quartile))+  
                          geom_point() +geom_text(hjust=0, vjust=0)
#Add cross at center
avgPlot<-avgPlot +
      geom_point(data=tibble(x=0,y=0),
               aes(x=x,y=x,label=NULL),color="darkred",shape=3) 
#Add title and set graph limits
avgPlot<-avgPlot +  
  ggtitle('Average eye position of each quartile',subtitle=', with red cross showing screen center') +
  xlim(-widthPix/2,widthPix/2) + ylim(-heightPix/2,heightPix/2) +
  theme_bw() + theme( panel.grid.minor=element_blank(),panel.grid.major=element_blank() )

show(avgPlot)
```


For Momo's program downstairs, the first trial doesn't work for some reason, so for her we should throw away the first trial. (If don't want to do that, set to FALSE)

```{r}
throwAwayFirstTrial = FALSE
```


```{r}
#| echo: false

fixatns<- EDFstuff$fixations
if (throwAwayFirstTrial) { #Throw away first trial
  fixatns<- fixatns %>% filter(trial > 1)
}
```


```{r}
#Calculate time by which it matters that they're fixating, which is when targets are no longer cued
fixationInterval = c(800,1300)
trackingExtraTime = 1200 #ms, which is how long the blobs are cued, but that's after the fixation interval
trialMinTimeBeforeCuesOff = min(fixationInterval) + trackingExtraTime
#Can also look at additional columns in later versions of the program, that show fixationInterval
```

Just look after first 2000 ms, because first `r fixationInterval[1]` ms, up to max of  `r fixationInterval[2]` ms is fixation, then blobs cued for `r `trackingExtraTime` ms so really I don't have to exclude until after `r fixationInterval[1]` + `r trackingExtraTime` = `r trialMinTimeBeforeCuesOff` ms.

For participants after 1 June, added record of fixatnPeriodFrames, so for them only have to exclude after fixatnPeriodFrames\*refreshRate + 1200.

From previous exploring, I know that lots of occasional bad stuff happens over the first 100ms.



Plot to see how average fixation x changes over time across trials, after minimum fixation interval, to look for possible drift (gradual trend of calibration getting more and more wrong).

```{r}
#| echo: false

#Plot to see how it changes over time across trials
fixatns %>% filter(sttime_rel > trialMinTimeBeforeCuesOff) %>%
  group_by(trial) %>%
  summarise(gavx = mean(gavx, na.rm = TRUE)) %>%
  ggplot(aes(x = trial, y = gavx)) +
  geom_hline(yintercept = widthPix/2,col="black") +  
  geom_point() #You can see the drift

```

Plot to see how average fixation y changes over time across trials, to look possible drift (gradual trend of calibration getting more and more wrong).

```{r}
#| echo: false

fixatns %>% filter(sttime_rel > trialMinTimeBeforeCuesOff) %>%
  group_by(trial) %>%
  summarise(gavy = mean(gavy, na.rm = TRUE)) %>%
  ggplot(aes(x = trial, y = gavy)) +
  geom_hline(yintercept = heightPix/2,col="black") +  
  geom_point() #You can see the drift

```

Look for possible drift (gradual trend of calibration getting more and more wrong) of average fixation position across trials with 2D plot.

```{r}
#| echo: false
fixatns %>% filter(sttime_rel > trialMinTimeBeforeCuesOff) %>%
  group_by(trial) %>%
  summarise(gavx = mean(gavx, na.rm = TRUE), gavy = mean(gavy, na.rm = TRUE)) %>%
  ggplot(aes(x = gavx, y = gavy)) +
  geom_hline(yintercept = heightPix/2,col="black") +  
  geom_vline(xintercept = widthPix/2,col="black") +  
  geom_point(aes(color=trial))

#ggplot(fixatns, aes(x=gavx, y=gavy, color=trial) ) +
#  stat_summary(fun="mean",geom="point")

#Implement drift correction,
# by taking average of every trial? Need to decide on limited interval at beginning of trial.
```

Look at x and y traces of trials for first 50 trials

```{r}
#| echo: false

fixatns %>% filter(sttime_rel > trialMinTimeBeforeCuesOff) %>%
  filter(trial<50) %>% 
  ggplot( aes(x=sttime_rel, y=gavx, color=trial) ) +
  ylab('average x during fixation') + xlab('sttime_rel (ms)') +
  ggtitle('First 50 trials') +
  geom_hline(yintercept = widthPix/2,col="black") +  
  geom_point() + geom_line(aes(group=trial))

```

Divide trials into four groups (quartiles) and plot for each
```{r}
#| echo: false
# Calculate quartiles
quartiles <- quantile(samples$trial)
# Create the new column 'quartile'
fixatns <- fixatns %>%
  mutate(quartile = cut(trial, breaks = quartiles, include.lowest = TRUE, labels = FALSE))
fixatns<- fixatns |> mutate(trialWithinQuartile = trial-(quartile-1)*max(samples$trial)/max(fixatns$quartile))

fixatns %>% filter(sttime_rel > trialMinTimeBeforeCuesOff) %>% 
  ggplot( aes(x=sttime_rel, y=gavx, color=trialWithinQuartile) ) +
  ylab('average x during fixation') + xlab('sttime_rel (ms)') +
  ggtitle('') +
  geom_hline(yintercept = widthPix/2,col="black") +  
  geom_point() + geom_line(aes(group=trial)) + facet_wrap(.~quartile)
```
Do it for y

```{r}
#| echo: false

fixatns %>% filter(sttime_rel > trialMinTimeBeforeCuesOff) %>% 
  ggplot( aes(x=sttime_rel, y=gavy, color=trialWithinQuartile) ) +
  ylab('average y during fixation') + xlab('sttime_rel (ms)') +
  ggtitle('') +
  geom_hline(yintercept = heightPix/2,col="black") +  
  geom_point() + geom_line(aes(group=trial)) + facet_wrap(.~quartile)
```


Look at first portion of trial before the targets are highlighted for example, when it doesn't matter where participants are looking but we could use some of that portion for drift correction if we trust the participant.

For young/old this is very OK because it doesn't matter where the participants are looking as long as they don't move their eyes, whereas for Momo it's not so kosher because absolute value of the deviation is important.

Plot distance from fixation over time. Actually show first period where cues are still always on to see if that is the most reliable time of fixation.

```{r}
#| echo: false
fixatns$distFromFixatn = sqrt( (fixatns$gavx - widthPix/2)^2 + (fixatns$gavy - heightPix/2)^2 )

overTime<- fixatns %>%
  ggplot( aes(x=sttime_rel, y=distFromFixatn, color=trialWithinQuartile) ) +
  geom_point() + geom_line(aes(group=trial)) +
  geom_vline(xintercept=trialMinTimeBeforeCuesOff) +
  ggtitle('Distance from fixation over each trial') + facet_wrap(.~quartile)
show(overTime)
```

The first 300 ms or so look very bad, so exclude that and only show first 1000 ms to further zoom in.

```{r}
#| echo: false
overTime + xlim(350,1300)
```
Based on participant M471, minimum distance occurs from about 400 to 800 ms. So we could do drift correction based on that interval.

Zoom in but show outliers in red to indicate they'd be off the scale.

```{r}
#| echo: false

minValToShow = 0
maxValToShow = 50
  
fixatns %>% filter(sttime_rel > trialMinTimeBeforeCuesOff) %>% 
  mutate(outlier = ifelse(distFromFixatn<minValToShow | distFromFixatn>maxValToShow, TRUE, FALSE)) %>%  #determine outliers
  mutate(distFromFixatn =  ifelse(distFromFixatn > maxValToShow, maxValToShow, distFromFixatn)) %>%     #replace outliers
  mutate(distFromFixatn =  ifelse(distFromFixatn < minValToShow, minValToShow, distFromFixatn)) %>%
  ggplot( aes(x=sttime_rel, y=distFromFixatn, color=trialWithinQuartile, shape=outlier) ) +
      ylim(minValToShow,maxValToShow) + #restrict axes
      scale_shape_manual(values = c(16, 21)) + #filled circle and unfilled, for outliers
      geom_point(fill='red') + #only the outlier symbol is fillable
      geom_line(aes(group=trial)) + facet_wrap(.~quartile)
```

## Consider drift correction options

```{r}
doDriftCorrection = TRUE
```

```{r}
intervalToAssumeWasCentral<- c(300,800)
```

Use intervalToAssumeWasCentral by calculating the average sample position during that interval for each trial. Then subtract that from all the other samples during the trial.

However, should also probably add a check that that value isn't too far from the center according to the eyetracker, as that would be a sign that probably the person did look away from there on that particular trial.

A more sophisticated algorithm would calculate a running average across several trials to be more robust to eye movements occuring during individual trials.

(could alternatively use the average fixation position rather than sample)

Can't use samples because it doesn't have sttime_rel, it only has time_rel which is since the beginning of the recording session so I'd have to get the time markers.

A problem is that some trials have fixations that didn't start within the interval but did extend into the interval, so shouldn't just test against sttime_rel. So a criterion to catch fixations that either start or end in the interval can be:
  * start time being in the interval, or
  * end time being in the interval,

That still won't catch fixations that span the entire interval. To catch those, have to test for:
  * start time being less than interval start AND
  * end time being greater than interval end

```{r}
intervalFixatns<- fixatns %>% 
  filter( (sttime_rel > intervalToAssumeWasCentral[1] & sttime_rel < intervalToAssumeWasCentral[2])    |     #started during interval
          (entime_rel < intervalToAssumeWasCentral[2] & entime_rel > intervalToAssumeWasCentral[1]) |  #ended during interval
          (sttime_rel < intervalToAssumeWasCentral[1] &
           entime_rel > intervalToAssumeWasCentral[2]) #spanned the interval
        )

# Label each fixation based on which type it is
intervalFixatns <- intervalFixatns %>%
  mutate(
    category = case_when(
      (sttime_rel > intervalToAssumeWasCentral[1]) & (entime_rel < intervalToAssumeWasCentral[2]) ~ "entirelyInInterval",
      (sttime_rel > intervalToAssumeWasCentral[1] & sttime_rel < intervalToAssumeWasCentral[2]) ~ "startedInInterval",
      (entime_rel < intervalToAssumeWasCentral[2] & entime_rel > intervalToAssumeWasCentral[1])  ~ "endedInInterval",
      sttime_rel < intervalToAssumeWasCentral[1] & entime_rel > intervalToAssumeWasCentral[2] ~ "spannedInterval",
      TRUE ~ NA_character_  # Default case if none of the conditions are met
    )
  )

```

Plot.

```{r}
#| echo: false

intervalFixatns %>% 
  ggplot( aes(x=trial, y=distFromFixatn, color=category) ) + geom_point() +
  theme_classic() + ggtitle('Fixations of interval')
```

Based on what I see above for M471, the category of ending in the interval is no good, probably because participanat was looking elsewhere at very beginning and shifted to start looking in the right place, lots of large distFromFixatn values, whereas other categories ar OK, although entirelyInInterval not great.

there are a few trials where fiation is more than 40 pixels off during that interval where we can think that probably drift correction based on that is inappropriate, but the vast majority are within 30 pixels, so maybe it's ok to do drift correction based on them, or based on a running average of them.

Show the results, zoomed in but show outliers in red to indicate they'd be off the scale.

```{r}
#| echo: false

minValToShow = 0
maxValToShow = 50
  
intervalFixatns %>% 
  mutate(outlier = ifelse(distFromFixatn<minValToShow | distFromFixatn>maxValToShow, TRUE, FALSE)) %>%  #determine outliers
  mutate(distFromFixatn =  ifelse(distFromFixatn > maxValToShow, maxValToShow, distFromFixatn)) %>%     #replace outliers
  mutate(distFromFixatn =  ifelse(distFromFixatn < minValToShow, minValToShow, distFromFixatn)) %>%
  ggplot( aes(x=trial, y=distFromFixatn, shape=outlier, color=category) ) +
      ylim(minValToShow,maxValToShow) + #restrict axes
      scale_shape_manual(values = c(16, 21)) + #filled circle and unfilled, for outliers
      geom_point(fill='yellow',size=3) + #only the outlier symbol is fillable
      theme_classic()
```

Average fixations of interval for each trial.
```{r}
#| echo: false
avgPosDuringInterval <- intervalFixatns %>% filter(category != "endedInInterval") %>%
  group_by(trial) %>%
  summarise(x=mean(gavx), y=mean(gavy))

avgPosDuringInterval$distFromFixatn<- sqrt( (avgPosDuringInterval$x - widthPix/2)^2 +
                                            (avgPosDuringInterval$y - heightPix/2)^2 )
```

Plot

```{r}
#| echo: false
avgPosDuringInterval %>% 
  ggplot( aes(x=trial, y=distFromFixatn) ) + geom_point() +
  theme_classic() + ggtitle('Average of fixations of interval') + 
  geom_smooth(method='lm',formula='y~x')

```
We still have some large values of greater than e.g. 40 that we shouldn't use for drift correction, so we just won't use those.

## Set up parameters for optional drift correction

Calculate the desired drift corrections, excluding ones larger than: 
```{r}
maxDistanceToDriftCorrect<- 30
```

```{r}
#| echo: false
#Maybe if I replace large values with NA, I can do simple subtraction and nothing will happen to the corresponding values. But actually there is the possibility of some trials not having a row at all, so I need to deal with that anyway.
#So maybe do the join first and then see where we are at.


#Need to expand avgPosDuringInterval to provide one row per trial.
avgDuringInterval<- avgPosDuringInterval %>% select(-distFromFixatn) #get rid of this column because there's also one in fixatns

fixatnsAndCorrectn <- left_join(fixatns, avgDuringInterval, by=join_by(trial)) 

#Trials where there is no drift correction had no entry in avgDuringInterval,
#so it gets an NA for xCorrectd,yCorrectd
#Thus in case of NA, don't want to drift correct,
#assuming center is actual center, widthPix/2, heightPix/2 (no drift correction)
#So find all NAs and replace meanX and meanY with widthPix/2, heightPix/2
fixatnsAndCorrectn<- fixatnsAndCorrectn %>% 
  mutate(meanX = case_when( is.na(x) ~ widthPix/2,
                            TRUE ~ x ),
         meanY = case_when( is.na(y) ~ heightPix/2,
                            TRUE ~ y ) )

```

For each trial's fixations, subtract the drift correction result from the coordinates.

```{r}
#| echo: false
fixatnsAndCorrectn$xDevCorrectd<- fixatnsAndCorrectn$gavx - fixatnsAndCorrectn$meanX
fixatnsAndCorrectn$yDevCorrectd<- fixatnsAndCorrectn$gavy - fixatnsAndCorrectn$meanY

#Change the above to a case_when where don't do it if exceeds maxDistanceToDriftCorrect

fixatnsAndCorrectn<-fixatnsAndCorrectn %>% mutate(
            distCorrectd = sqrt( (xDevCorrectd)^2 + (yDevCorrectd)^2 )
         )


```

```{r}
#| echo: false
#Sanity-check by calculating the average
avgX <- round(mean(fixatnsAndCorrectn$xDevCorrectd),1)
avgY <- round(mean(fixatnsAndCorrectn$yDevCorrectd),1)
message("After drift correction, average xDevCorrectd,yDevCorrectd = ",avgX,",",avgY)
if ( abs(avgX) > 15   |  abs(avgY) > 15 ) {
  message("Because it's bigger than 15, it suggests the drift correction went very wrong")
}

```

```{r}
#| echo: false
#Plots to sanity-check the result of the correction,

#Create a 2-dimensional plot
#Plot to see how it changes over time across trials
fixatnsAndCorrectn %>% group_by(trial) %>%
  ggplot(aes(x = xDevCorrectd, y = yDevCorrectd)) +
  geom_point(aes(color=trial)) + coord_fixed(ratio = 1)

```

```{r}
#| echo: false
#Distance plot
fixatnsAndCorrectn %>% 
  ggplot( aes(x=trial, y=distCorrectd) ) + geom_point() +
  ggtitle('Drift-corrected distance of each fixation') + 
  geom_smooth(method='lm',formula='y~x')
```


## Consider effect of different criteria for excluding trials

Calculate and visualize how many trials will be excluded under various criteria.

Want to have criterion on horizontal axis and proportion trials excluded on vertical axis.

This will require creating a new dataframe because for each trial, need to calculate numCriteria things, meaning the number of rows will expand.
One way to do it would be to do a sort of expand_grid where every trial gets duplicated by numCriteria, with criterion a new column. Then, apply whatever is in the criterion column to each row.

Criteria to show the effect of:

```{r}
distFromCenterCriteria <- c(20,30,40,60,100)
```

Calculate whether each trial's distFromFixatn is greater than each criterion
```{r}
#| echo: false

#xDevCorrected is corrected one, now calculate uncorrected deviation
fixatnsAndCorrectn$xDev <- fixatnsAndCorrectn$gavx - widthPix/2
fixatnsAndCorrectn$yDev <- fixatnsAndCorrectn$gavy - heightPix/2

fixatnsAndCorrectn<-fixatnsAndCorrectn %>% mutate(
            distNotDriftCorrectd = sqrt( (xDev)^2 + (yDev)^2 )
         )

#Calculate effect of applying each criterion on each row, yielding nrows*numCriteria rows
newColumns<- fixatnsAndCorrectn %>% rowwise() |>
  reframe( lookedAway = distNotDriftCorrectd>distFromCenterCriteria,
           lookedAwayDriftCorrectd = distCorrectd>distFromCenterCriteria,
           criterion = distFromCenterCriteria ) 

#Duplicate original dataframe, repeat each row number of criteria times. Or better, https://stackoverflow.com/a/78904367/302378555. 
longerVersion<-fixatnsAndCorrectn %>% 
          slice(rep(1:n(), each = length(distFromCenterCriteria)))

#Combine the new columns with the old
eachCriterionCheckedEveryFixatn<- cbind(newColumns,longerVersion)

#It checked every fixation in each trial, now need to collapse to have one row per trial*criterion
#anyTooFar means any fixation on a trial was too far away
eachCriterionEveryTrial <- eachCriterionCheckedEveryFixatn |>  filter(sttime_rel > trialMinTimeBeforeCuesOff) |>
      group_by(trial,criterion) |>
      summarise(anyTooFar = any(lookedAway), anyTooFarCorrctd = any(lookedAwayDriftCorrectd),
                numTooFar = sum(lookedAway), numTooFarCorrcted =sum(lookedAwayDriftCorrectd),
                .groups="keep") #just to avoid the output saying which group is used
```

Now calculate proportion of trials tooFar for each criterion.
anyTooFar means at least one fixation on a trial was too far away:

```{r}
#| echo: false
proportnEachCriterion <- eachCriterionEveryTrial |> group_by(criterion) |> 
        summarise( proportnTooFar = mean(anyTooFar), 
                   proportnTooFarC= mean(anyTooFarCorrctd),
                   avgNumForTrialsTooFar = sum(anyTooFar[anyTooFar]),
                   avgNumForTrialsTooFarC = sum(anyTooFarCorrctd[anyTooFarCorrctd])
                   )

print(round(proportnEachCriterion,3))
```

Visualize proportion of trials too far away for each criterion.

```{r}
#| echo: false

ggplot(proportnEachCriterion, aes(x=criterion,y=proportnTooFar)) +
    geom_point() + xlab('criterion (pixels)') +
    geom_point(aes(x=criterion,y=proportnTooFarC),color="green") +
    ggtitle(fname)
```


Plot by trialnum whether each trial should be excluded, for each criterion.

```{r}
#| echo: false

ggplot(eachCriterionEveryTrial, aes(x=trial,y=anyTooFar,group=)) +
    geom_point()  + geom_line() +
    ggtitle(paste(fname,"not drift corrected")) + facet_grid(criterion~.)
```

## Lists of trials

Generate the list of trials to be excluded for a specific criterion

```{r}
myCriterion = 40 #pixels
```

```{r}
#| echo: false

tooFarEachTrial<- fixatns |> filter(sttime_rel > trialMinTimeBeforeCuesOff) |>
        mutate(tooFar = distFromFixatn > myCriterion) |> 
        group_by(trial) |> 
        summarise(anyTooFar = any(tooFar)) 
trialsTooFar <- which(tooFarEachTrial$anyTooFar)
        
```

The trials in which the person had fixatns farther than `r myCriterion` pixels from fixation, after the initial `r trialMinTimeBeforeCuesOff` seconds before the cues are no longer on, was:

```{r}
#| echo: false
print(trialsTooFar)
```
Print them in a column format for Momo or anyone who wants to copy-paste as a column into Excel
```{r}
#| echo: false
onesAndZeroes<- tooFarEachTrial$anyTooFar * 1.0
# Print the values of the list with implicit line breaks and no numbers
cat(unlist(onesAndZeroes), sep = "\n")

```